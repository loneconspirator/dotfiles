unbind C-b
set -g prefix C-s
bind-key -r C-s send-prefix

set -g default-shell /bin/zsh

# Re-source this file
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Basic terminal niceities
set-option -g default-terminal "screen-256color"
set-option -g status-keys "emacs"
set -sg escape-time 0

# Appearance
set -g window-style 'fg=colour247,bg=colour236'
set -g window-active-style 'fg=colour250,bg=black'
set -g status-fg '#666666'
set -g status-bg '#aaaaaa'

set -g status-left-length 50
set -g status-right " #(/usr/local/bin/battery -te) #(date '+%a, %b %d - %I:%M')"
set -g status-interval 60

# Creating and navigating panes
bind-key - split-window -v -c '#{pane_current_path}'
bind-key \ split-window -h -c '#{pane_current_path}'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l

# Fine adjustment (1 or 2 cursor cells per bump)
bind-key C-h resize-pane -L 5
bind-key C-l resize-pane -R 5
bind-key C-j resize-pane -D 2
bind-key C-k resize-pane -U 2

# Window navigation
bind C-Tab next-window

bind c new-window -c "#{pane_current_path}"
set -g base-index 1
set -g renumber-windows on

bind-key b break-pane -d

bind-key C-t choose-tree

bind-key C-l send-keys 'C-l' # forward clear screen command despite tmux remappings

set-window-option -g xterm-keys on

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"<Paste>
